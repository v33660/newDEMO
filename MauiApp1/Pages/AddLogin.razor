@page "/adduser"
@using MauiApp1.Services;
@using MauiApp1.Models;

@inject ILoginService LoginService;

<h1>Register</h1>

@if (_loginList == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <div class="form-group">
            <label>UserName</label>
            <input @bind="nameE" class="form-control" placeholder="User Name">
        </div>
        <div class="mt-2 form-group">
            <label>Password</label>
            <input @bind="passwordA" class="form-control" placeholder="Password">
        </div>
        <div class="mt-2 form-group">
            <label>Retype Password</label>
            <input @bind="passwordB" class="form-control" placeholder="Password">
        </div>

        <button class="btn btn-primary" @onclick="loginFun">Login</button>
        <div>
            <label>@match</label>
        </div>
    </div>
}

@code {
    private string nameE;
    private string passwordA; 
    private string passwordB;
    private string match = "";

    //double fontSize = 14;
    //var toast = Toast.Make(text, ToastDuration.Short, fontSize);

    List<LoginResposeModel> _loginList;

    protected override async Task OnInitializedAsync()
    {
        _loginList = await LoginService.GetAllLoginList();
    }




    //await toast.Show(cancellationTokenSource.Token);

    private void loginFun()
    {
        if (passwordA == passwordB)
        {
            var chance = false;
            foreach (var login in _loginList)
            {
                var n = login.userName;
                var p = login.password;
                if (n == nameE)
                {
                    match = "Account already exists!";
                    chance = false;
                    break;
                }
                else
                {
                    //AddUserFun();
                    //break;
                    chance = true;
                }
            }
            if(chance){
                AddUserFun();
            }
        } else
        {
            match = "Passwords do not match!";
        }

    }

    private async void AddUserFun()
    {
        var addloginRequest = new AddLoginRequest
        {
            userName = nameE,
            password = passwordA
        };

        var response = await LoginService.Addlogin(addloginRequest); 

        this.StateHasChanged();


        if (response != null)
        {
            await App.Current.MainPage.DisplayAlert("Login Added", "ADDED", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Login unsuccesfull", "OK");
        }
    }
}
